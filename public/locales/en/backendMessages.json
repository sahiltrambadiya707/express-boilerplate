{
  "API_MESSAGES": {
    "an_problem_happened_during_registering_the_user": "An problem happened during registering the user.",
    "the_user_already_exits": "The user already exits.",
    "this_user_has_already_been_verified": "This user has already been verified.",
    "we_were_unable_to_find_a_user_for_this_token": "We were unable to find a user for this token.",
    "an_unexpected_error_occurred": "An unexpected error occurred.",
    "incorrect_credentials": "Incorrect Credentials",
    "the_email_is_not_associated_with_any_account": "The email is not associated with any account",
    "password_reset_token_is_invalid_or_has_expired": "Password reset token is invalid or has expired.",
    "your_password_has_been_updated": "Your password has been updated.",
    "a_verification_mail_has_been_sent_successfully": "A verification mail has been sent successfully.",
    "the_account_has_been_verified_successfully": "The account has been verified successfully.",
    "login_successful": "Login Successful",
    "a_password_reset_mail_has_been_sent_successfully": "A password reset mail has been sent successfully.",
    "we_apologize_for_the_inconvenience_the_request_cannot_be_processed_as_it_has_expired": "We apologize for the inconvenience the request cannot be processed as it has expired",
    "the_token_and_other_specific_details_have_been_successfully_retrieved": "The token and other specific details have been successfully retrieved",
    "logout_successfully": "logout successfully",
    "the_user_auth0_data_retrieval_was_successful": "The user auth0 data retrieval was successful",
    "while_attempting_to_retrieve_the_roles_an_issue_occurred": "While attempting to retrieve the roles an issue occurred",
    "while_attempting_to_retrieve_the_modules_an_issue_occurred": "While attempting to retrieve the modules an issue occurred",
    "please_choose_another_name_because_this_name_code_already_exists": "Please choose another name because this name code already exists",
    "there_was_an_error_encountered_while_trying_to_create_the_role": "There was an error encountered while trying to create the role",
    "there_was_no_role_detected": "There was no role detected",
    "there_seems_to_be_an_issue_with_retrieving_the_roles": "There seems to be an issue with retrieving the roles",
    "there_was_a_problem_encountered_when_attempting_to_remove_a_role": "There was a problem encountered when attempting to remove a role",
    "there_was_an_issue_encountered_while_retrieving_role_information": "There was an issue encountered while retrieving role information",
    "there_was_an_issue_while_attempting_to_retrieve_the_role_using_the_code": "There was an issue while attempting to retrieve the role using the code",
    "field_restriction_retrieval_successful": "Field restriction retrieval successful",
    "field_restring_details_retrieve_successful": "Field restring details retrieve successful",
    "field_restriction_has_been_updated": "Field restriction has been updated",
    "the_modules_that_were_needed_have_been_retrieved_successfully": "The modules that were needed have been retrieved successfully",
    "the_modules_were_retrieved_successfully": "The modules were retrieved successfully",
    "roles_were_successfully_retrieved": "Roles were successfully retrieved",
    "the_role_has_been_created_successfully": "The role has been created successfully",
    "the_role_has_been_successfully_modified": "The role has been successfully modified",
    "the_role_was_successfully_deleted": "The role was successfully deleted",
    "role_data_were_successfully_retrieved": "Role data were successfully retrieved",
    "authorization_required": "Authorization required",
    "permission_denied": "Permission Denied",
    "internal_server_error": "Internal server error",
    "validation_error": "Validation Error"
  },
  "JOI_VALIDATION": {
    "alternatives.all": "{{#label}} does not match all of the required types",
    "alternatives.any": "{{#label}} does not match any of the allowed types",
    "alternatives.match": "{{#label}} does not match any of the allowed types",
    "alternatives.one": "{{#label}} matches more than one allowed type",
    "alternatives.types": "{{#label}} must be one of {{#types}}",
    "any.custom": "{{#label}} failed custom validation because {{#error.message}}",
    "any.default": "{{#label}} threw an error when running default method",
    "any.failover": "{{#label}} threw an error when running failover method",
    "any.invalid": "{{#label}} contains an invalid value",
    "any.only": "{{#label}} must be {if(#valids.length == 1, \"\", \"one of \")}{{#valids}}",
    "any.ref": "{{#label}} {{#arg}} references \"{{#ref}}\" which {{#reason}}",
    "any.required": "{{#label}} is required",
    "any.unknown": "{{#label}} is not allowed",
    "array.base": "{{#label}} must be an array",
    "array.excludes": "{{#label}} contains an excluded value",
    "array.hasKnown": "{{#label}} does not contain at least one required match for type \"{#patternLabel}\"",
    "array.hasUnknown": "{{#label}} does not contain at least one required match",
    "array.includes": "{{#label}} does not match any of the allowed types",
    "array.includesRequiredBoth": "{{#label}} does not contain {{#knownMisses}} and {{#unknownMisses}} other required value(s)",
    "array.includesRequiredKnowns": "{{#label}} does not contain {{#knownMisses}}",
    "array.includesRequiredUnknowns": "{{#label}} does not contain {{#unknownMisses}} required value(s)",
    "array.length": "{{#label}} must contain {{#limit}} items",
    "array.max": "{{#label}} must contain less than or equal to {{#limit}} items",
    "array.min": "{{#label}} must contain at least {{#limit}} items",
    "array.orderedLength": "{{#label}} must contain at most {{#limit}} items",
    "array.sort": "{{#label}} must be sorted in {#order} order by {{#by}}",
    "array.sort.mismatching": "{{#label}} cannot be sorted due to mismatching types",
    "array.sort.unsupported": "{{#label}} cannot be sorted due to unsupported type {#type}",
    "array.sparse": "{{#label}} must not be a sparse array item",
    "array.unique": "{{#label}} contains a duplicate value",
    "binary.base": "{{#label}} must be a buffer or a string",
    "binary.length": "{{#label}} must be {{#limit}} bytes",
    "binary.max": "{{#label}} must be less than or equal to {{#limit}} bytes",
    "binary.min": "{{#label}} must be at least {{#limit}} bytes",
    "boolean.base": "{{#label}} must be a boolean",
    "date.base": "{{#label}} must be a valid date",
    "date.format": "{{#label}} must be in {msg(\"date.format.\" + #format) || #format} format",
    "date.format.iso": "ISO 8601 date",
    "date.format.javascript": "timestamp or number of milliseconds",
    "date.format.unix": "timestamp or number of seconds",
    "date.greater": "{{#label}} must be greater than \"{{#limit}}\"",
    "date.less": "{{#label}} must be less than \"{{#limit}}\"",
    "date.max": "{{#label}} must be less than or equal to \"{{#limit}}\"",
    "date.min": "{{#label}} must be larger than or equal to \"{{#limit}}\"",
    "function.arity": "{{#label}} must have an arity of {{#n}}",
    "function.class": "{{#label}} must be a class",
    "function.maxArity": "{{#label}} must have an arity lesser or equal to {{#n}}",
    "function.minArity": "{{#label}} must have an arity greater or equal to {{#n}}",
    "number.base": "{{#label}} must be a number",
    "number.greater": "{{#label}} must be greater than {{#limit}}",
    "number.infinity": "{{#label}} cannot be infinity",
    "number.integer": "{{#label}} must be an integer",
    "number.less": "{{#label}} must be less than {{#limit}}",
    "number.max": "{{#label}} must be less than or equal to {{#limit}}",
    "number.min": "{{#label}} must be larger than or equal to {{#limit}}",
    "number.multiple": "{{#label}} must be a multiple of {{#multiple}}",
    "number.negative": "{{#label}} must be a negative number",
    "number.port": "{{#label}} must be a valid port",
    "number.positive": "{{#label}} must be a positive number",
    "number.precision": "{{#label}} must have no more than {{#limit}} decimal places",
    "number.unsafe": "{{#label}} must be a safe number",
    "object.and": "{{#label}} contains {{#presentWithLabels}} without its required peers {{#missingWithLabels}}",
    "object.assert": "{{#label}} is invalid because {if(#subject.key, `\"` + #subject.key + `\" failed to ` + (#message || \"pass the assertion test\"), #message || \"the assertion failed\")}",
    "object.base": "{{#label}} must be of type {{#type}}",
    "object.instance": "{{#label}} must be an instance of \"{{#type}}\"",
    "object.length": "{{#label}} must have {{#limit}} key{if(#limit == 1, \"\", \"s\")}",
    "object.max": "{{#label}} must have less than or equal to {{#limit}} key{if(#limit == 1, \"\", \"s\")}",
    "object.min": "{{#label}} must have at least {{#limit}} key{if(#limit == 1, \"\", \"s\")}",
    "object.missing": "{{#label}} must contain at least one of {{#peersWithLabels}}",
    "object.nand": "\"{{#mainWithLabel}}\" must not exist simultaneously with {{#peersWithLabels}}",
    "object.oxor": "{{#label}} contains a conflict between optional exclusive peers {{#peersWithLabels}}",
    "object.pattern.match": "{{#label}} keys failed to match pattern requirements",
    "object.refType": "{{#label}} must be a Joi reference",
    "object.regex": "{{#label}} must be a RegExp object",
    "object.rename.multiple": "{{#label}} cannot rename \"{{#from}}\" because multiple renames are disabled and another key was already renamed to \"{{#to}}\"",
    "object.rename.override": "{{#label}} cannot rename \"{{#from}}\" because override is disabled and target \"{{#to}}\" exists",
    "object.schema": "{{#label}} must be a Joi schema of {{#type}} type",
    "object.unknown": "{{#label}} is not allowed",
    "object.with": "\"{{#mainWithLabel}}\" missing required peer \"{{#peerWithLabel}}\"",
    "object.without": "\"{{#mainWithLabel}}\" conflict with forbidden peer \"{{#peerWithLabel}}\"",
    "object.xor": "{{#label}} contains a conflict between exclusive peers {{#peersWithLabels}}",
    "string.alphanum": "{{#label}} must only contain alpha-numeric characters",
    "string.base": "{{#label}} must be a string",
    "string.base64": "{{#label}} must be a valid base64 string",
    "string.creditCard": "{{#label}} must be a credit card",
    "string.dataUri": "{{#label}} must be a valid dataUri string",
    "string.domain": "{{#label}} must contain a valid domain name",
    "string.email": "{{#label}} must be a valid email",
    "string.empty": "{{#label}} is not allowed to be empty",
    "string.guid": "{{#label}} must be a valid GUID",
    "string.hex": "{{#label}} must only contain hexadecimal characters",
    "string.hexAlign": "{{#label}} hex decoded representation must be byte aligned",
    "string.hostname": "{{#label}} must be a valid hostname",
    "string.ip": "{{#label}} must be a valid ip address with a {{#cidr}} CIDR",
    "string.ipVersion": "{{#label}} must be a valid ip address of one of the following versions {{#version}} with a {{#cidr}} CIDR",
    "string.isoDate": "{{#label}} must be in iso format",
    "string.isoDuration": "{{#label}} must be a valid ISO 8601 duration",
    "string.length": "{{#label}} length must be {{#limit}} characters long",
    "string.lowercase": "{{#label}} must only contain lowercase characters",
    "string.max": "{{#label}} length must be less than or equal to {{#limit}} characters long",
    "string.min": "{{#label}} length must be at least {{#limit}} characters long",
    "string.normalize": "{{#label}} must be unicode normalized in the {{#form}} form",
    "string.pattern.base": "{{#label}} with value \"{[.]}\" fails to match the required pattern: {{#regex}}",
    "string.pattern.invert.base": "{{#label}} with value \"{[.]}\" matches the inverted pattern: {{#regex}}",
    "string.pattern.invert.name": "{{#label}} with value \"{[.]}\" matches the inverted {{#name}} pattern",
    "string.pattern.name": "{{#label}} with value \"{[.]}\" fails to match the {{#name}} pattern",
    "string.token": "{{#label}} must only contain alpha-numeric and underscore characters",
    "string.trim": "{{#label}} must not have leading or trailing whitespace",
    "string.uppercase": "{{#label}} must only contain uppercase characters",
    "string.uri": "{{#label}} must be a valid uri",
    "string.uriCustomScheme": "{{#label}} must be a valid uri with a scheme matching the {{#scheme}} pattern",
    "string.uriRelativeOnly": "{{#label}} must be a valid relative uri",
    "symbol.base": "{{#label}} must be a symbol",
    "symbol.map": "{{#label}} must be one of {{#map}}"
  }
}
